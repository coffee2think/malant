/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-01 05:57:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.model.vo.Member;

public final class mapMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/views/map/../common/sidebar.jsp", Long.valueOf(1693547731051L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("member.model.vo.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(".container > div {\r\n");
      out.write("	float : left;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <title>마커 클러스터러에 클릭이벤트 추가하기</title>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("<div>\r\n");
      out.write('\n');

	Member loginMember = (Member) session.getAttribute("loginMember");

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\" />\n");
      out.write("<link rel=\"stylesheet\" href=\"/malant/resources/common/css/sidebar.css\" />\n");
      out.write("<link rel=\"stylesheet\" href=\"/malant/resources/common/css/font.css\" />\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<div class=\"sidebar\">\n");
      out.write("		<div class=\"sidebar-header\">\n");
      out.write("			<span class=\"sidebar-title\"><a href=\"/malant\"> <img\n");
      out.write("					src=\"/malant/resources/common/images/main_tilte.gif\" alt=\"식물 검색\" /></a></span>\n");
      out.write("		</div>\n");
      out.write("		<section>\n");
      out.write("			<ul id=\"new_categories\">\n");
      out.write("				<li><a href=\"/malant\">식물 검색</a></li>\n");
      out.write("				<li><a href=\"/malant/views/board/boardMainList.jsp\">커뮤니티</a></li>\n");
      out.write("				<li><a \n");
      out.write("				");
 if(loginMember == null) { 
      out.write("\n");
      out.write("					href=\"/malant/views/member/loginPage.jsp\"\n");
      out.write("				");
 }else { 
      out.write("\n");
      out.write("					href=\"/malant/mplist?user_no=");
      out.print( loginMember.getUserNo() );
      out.write("\"\n");
      out.write("				");
 } 
      out.write(">다이어리</a></li>\n");
      out.write("				<li><a href=\"/malant/views/map/mapMain.jsp\">전국 식물원</a></li>\n");
      out.write("				<li><a href=\"/malant/smplist\">스토어</a></li>\n");
      out.write("				<li><a href=\"/malant/views/notice/noticeMainList.jsp\">공지/이벤트</a></li>\n");
      out.write("			</ul>\n");
      out.write("		</section>\n");
      out.write("		<!-- 로그인 영역 -->\n");
      out.write("		");
 if (loginMember == null) { // 로그인하지 않았을 때 
      out.write("\n");
      out.write("			<div class=\"login-section\">\n");
      out.write("				<hr solid color=\"#ddd\" />\n");
      out.write("				<div class=\"login-box\" onclick=\"location.href='/malant/views/member/loginPage.jsp;'\">\n");
      out.write("					로그인하러 가기\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("			\n");
      out.write("			<!-- 회원가입/아이디/비밀번호 찾기 영역 -->\n");
      out.write("			<div class=\"account-section\">\n");
      out.write("				<a href=\"/malant/views/member/enrollMember.jsp\" class=\"account-link\">회원가입</a><span class=\"login-divide\">|</span>\n");
      out.write("				<!-- 아이디/비밀번호 찾기는 새창을 띄워 진행 -->\n");
      out.write("				<a href=\"#\" class=\"account-link\" onclick=\"window.open('/malant/findAccount.jsp?find=id', '_blank', 'width=900, height=1000');\">아이디찾기</a><span class=\"login-divide\">|</span>\n");
      out.write("				<a href=\"#\"	class=\"account-link\" onclick=\"window.open('/malant/findAccount.jsp?find=pwd', '_blank', 'width=900, height=1000');\">비밀번호재설정</a>\n");
      out.write("			</div>\n");
      out.write("		");
 } else { 
      out.write("\n");
      out.write("			<div class=\"login-section\">\n");
      out.write("				");
      out.print( loginMember.getNickname() );
      out.write("님 환영합니다.<br>\n");
      out.write("				\n");
      out.write("				<a href=\"/malant/views/member/confirmMemberBeforeInfo.jsp?userid=");
      out.print( loginMember.getUserId() );
      out.write("\">마이페이지</a> &nbsp; \n");
      out.write("				<a href=\"/malant/logout\">로그아웃</a>\n");
      out.write("			</div>\n");
      out.write("		");
 } 
      out.write("\n");
      out.write("	</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("</div>\r\n");
      out.write("<hr>\r\n");
      out.write("<div id=\"map\" style=\"width:80%;height:100vh;\"></div>\r\n");
      out.write("</div>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=ebd5781688fcaeab7febed1207bcf8f3&libraries&libraries=clusterer\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/malant/resources/common/js/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("    var map = new kakao.maps.Map(document.getElementById('map'), { // 지도를 표시할 div\r\n");
      out.write("        center : new kakao.maps.LatLng(36.2683, 127.6358), // 지도의 중심좌표\r\n");
      out.write("        level : 13// 지도의 확대 레벨\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    var clusterer = new kakao.maps.MarkerClusterer({\r\n");
      out.write("        map: map,\r\n");
      out.write("        averageCenter: true,\r\n");
      out.write("        minLevel: 10,\r\n");
      out.write("        disableClickZoom: false\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $.get(\"/malant/resources/map/js/ArboretumLocation.json\", function(data) {\r\n");
      out.write("        var markers = $(data.positions).map(function(i, position) {\r\n");
      out.write("            var marker = new kakao.maps.Marker({\r\n");
      out.write("                position: new kakao.maps.LatLng(position.lat, position.lng)\r\n");
      out.write("                \r\n");
      out.write("            });\r\n");
      out.write("			\r\n");
      out.write("            // 마커 클릭 이벤트 등록\r\n");
      out.write("            kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("            	console.log(name);\r\n");
      out.write("                // 인포윈도우 생성 및 옵션 설정\r\n");
      out.write("                var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("                    content:\r\n");
      out.write("		                    '<div class=\"info\">' + \r\n");
      out.write("		                    '   <div class=\"title\" id=\"arname\">' + position.name + '&nbsp;&nbsp;&nbsp;&nbsp;</div>' +\r\n");
      out.write("		                    '   <div class=\"address\">주소 : ' +  + '</div>' +\r\n");
      out.write("		                    '   <div class=\"page\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#\" onclick=\"함수()\">상세페이지</a></div>' +	\r\n");
      out.write("		                    '</div>',\r\n");
      out.write("                    removable: true\r\n");
      out.write("                });\r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("                $.ajax({\r\n");
      out.write("                	url:\"/malant/arbriefinfo\",\r\n");
      out.write("                	type: \"get\",\r\n");
      out.write("                	data: {lat : position.lat, lng : position.lng},\r\n");
      out.write("                	dataType: \"json\",\r\n");
      out.write("                	success: function(data){\r\n");
      out.write("                		\r\n");
      out.write("                	},\r\n");
      out.write("                	error : function(jqXHR, textStatus, errorThrown){\r\n");
      out.write("            			console.log(jqXHR + \", \" + textStatus + \", \" + errorThrown);\r\n");
      out.write("            		}\r\n");
      out.write("                	}); \r\n");
      out.write("                \r\n");
      out.write("                // 클릭된 마커의 위치에 인포윈도우 표시\r\n");
      out.write("                infowindow.open(map, marker);\r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("                  kakao.maps.event.addListener(map, 'click', function() {\r\n");
      out.write("                	  \r\n");
      out.write("                    infowindow.close();\r\n");
      out.write("                });  \r\n");
      out.write("                   \r\n");
      out.write("            	 // 클릭된 마커 이외의 다른 마커의 인포윈도우 닫기\r\n");
      out.write("               /*  markers.each(function(index, otherMarker) {\r\n");
      out.write("                    if (otherMarker !== marker) {\r\n");
      out.write("                        infowindow.close();\r\n");
      out.write("                    }\r\n");
      out.write("                });  */\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            return marker;\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 클러스터러에 마커들을 추가합니다\r\n");
      out.write("        clusterer.addMarkers(markers);\r\n");
      out.write("        \r\n");
      out.write("       /* function(){\r\n");
      out.write("        	document.getElementById(\"값\").text\r\n");
      out.write("        } */\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
